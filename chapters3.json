{
    "CHAPTER 1": "Installing\n1.1 conda\nIf you use conda to manage your Python environment (for example as part of Anaconda or Miniconda), you can easily\ninstall Qt, PyQt5, and QtPy (a common interface to all Python Qt bindings) using:\nconda install pyqt qtpy\n1.2 pip\nIf you don’t make use of conda, an easy way to install Qt, PyQt5, and QtPy is to do:\npip install pyqt5 qtpy\n3\nPython Qt tutorial Documentation, Release 0.0\n4",
    "Chapter 1": ". Installing",
    "CHAPTER 2": "Part 1 - Hello, World!\nTo start off, we need to create a QApplication object, which represents the overall application:\nfrom qtpy.QtWidgets import QApplication\napp = QApplication([])\nYou will always need to ensure that a QApplication object exists, otherwise your Python script will terminate with\nan error if you try and use any other Qt objects. The above won’t open any window - the term application here doesn’t\nrefer to a speciﬁc window that will open, but instead to a windowless object that forms the basis for anything else we\nwill build.\nBuilding blocks in Qt (and other similar frameworks) are called widgets . One of the simplest widgets is a text label.\nWe can create a label widget by doing:\nfrom qtpy.QtWidgets import QLabel\nlabel = QLabel('Hello, world!')\nlabel.show()\nNote that this should be done after creating a QApplication object. We need to explicitly tell Qt that we want to\nshow the widget as a graphical window using .show() , otherwise it will not be shown (this will come in handy once\nwe want to use widgets as building blocks for windows).\nIf you were to run the two code blocks above, the label would appear and disappear straight away because the script\nwould ﬁnish running. The ﬁnal step is to start the event loop. In graphical user interface (GUI) programming, an event\nloop is a common concept - the idea is to basically have an inﬁnite loop that will continuously check for user interaction\nwith the interface, such as clicking on buttons, entering text, and moving or closing windows. The inﬁnite loop can be\nterminated in various ways depending on the conﬁguration in QApplication - by default it will terminate once the\nvisible windows are closed. To start the event loop, we can do:\napp.exec_()\nThis is equivalent to doing:\nwhile True :\napp.processEvents()\n5\nPython Qt tutorial Documentation, Release 0.0\nLet’s take a look at the complete example:\nfrom qtpy.QtWidgets import QApplication, QLabel\n# Initialize application\napp = QApplication([])\n# Create label widget\nlabel = QLabel('Hello, world!')\nlabel.show()\n# Start 'event loop'\napp.exec_()\nCopy this into a Python script, and run it with e.g.:\npython 1.hello.py\nYou should see a small window pop up with ‘Hello, world!’ inside:\nClose the window, and the Python script should stop running.\nCongratulations, you’ve written your ﬁrst Qt application!\n6",
    "Chapter 2": ". Part 1 - Hello, World!",
    "CHAPTER 3": "Part 2 - Buttons and events\nLet’s be honest - the application we wrote in Part 1 - Hello, World! wasn’t the most exciting one ever. In this section,\nwe’re going to look at how to use buttons, and we will learn about events in Qt.\nFirst, let’s create a button (remember that as mentioned in Part 1 - Hello, World! , you should always set up a\nQApplication ﬁrst):\nfrom qtpy.QtWidgets import QPushButton\nbutton = QPushButton('Say hello')\nQt widgets often have different kinds of events you can connect to. An event is just something that happens for example\n(but not limited to) something the user does. For instance, button has an event called clicked that gets triggered\nwhen the user clicks on the button. The normal way to use events is to write functions that can then do something as a\nresult of the event being triggered.\nLet’s write a function that will get executed when the user clicks on the button:\ndefsay_hello(event):\nprint('Hello, world!')\nSuch a function typically takes the event as its only positional argument.\nWe can then connect this function to the clicked event:\nbutton.clicked.connect(say_hello)\nFinally, we can show the button with:\nbutton.show()\nLet’s take a look at the full example:\nfrom qtpy.QtWidgets import QApplication, QPushButton\n# Initialize application\napp = QApplication([])\n(continues on next page)\n7\nPython Qt tutorial Documentation, Release 0.0\n(continued from previous page)\n# Define a function to connect to the button\ndefsay_hello(event):\nprint('Hello, world!')\n# Create button widget and connect to 'say_hello'\nbutton = QPushButton('Say hello')\nbutton.clicked.connect(say_hello)\nbutton.show()\n# Start 'event loop'\napp.exec_()\nCopy this into a Python script, and run it with e.g.:\npython 2.button.py\nYou should see a small window pop up with a button inside:\nNow click on the button and you should see the following message appear in the terminal:\nHello, world!\nSuch fun!\n8",
    "Chapter 3": ". Part 2 - Buttons and events",
    "CHAPTER 4": "Part 3 - Laying out widgets\n4.1 Vertical layout\nLet’s now take a look at how to construct more interesting application windows by combining different widgets to-\ngether. Qt widgets can all include a ‘layout’, which deﬁnes combinations of children widgets. A simple example is the\nQVBoxLayout class, which allows widgets to be stacked vertically. Let’s use a label and a button widget and stack\nthese vertically into a layout:\nfrom qtpy.QtWidgets import QLabel, QVBoxLayout, QPushButton\n# Create label and button\nlabel = QLabel('Hello, world!')\nbutton = QPushButton('test')\n# Create layout and add widgets\nlayout = QVBoxLayout()\nlayout.addWidget(label)\nlayout.addWidget(button)\nHowever, note that a layout is not a widget, so we can’t simply do layout.show() at this point. Instead, we need to\nadd this layout to a parent widget. For this, we’ll use QWidget , which is the most basic kind of a widget - it contains\nnothing by default:\nwidget = QWidget()\nwidget.setLayout(layout)\nWe can now show this widget using:\nwidget.show()\nNote that in this kind of situation, it’s clear why we don’t want widgets to be shown by default and to have to specify\nwidget.show() . If we were to instead run button.show() , only the button widget would be shown.\nHere is the complete example:\n9\nPython Qt tutorial Documentation, Release 0.0\nfrom qtpy.QtWidgets import (QApplication, QLabel, QWidget,\nQVBoxLayout, QPushButton)\n# Initialize application\napp = QApplication([])\n# Create label and button\nlabel = QLabel('Hello, world!')\nbutton = QPushButton('test')\n# Create layout and add widgets\nlayout = QVBoxLayout()\nlayout.addWidget(label)\nlayout.addWidget(button)\n# Apply layout to widget\nwidget = QWidget()\nwidget.setLayout(layout)\n# Show widget\nwidget.show()\n# Start event loop\napp.exec_()\nCopy this into a Python script, and run it with e.g.:\npython 3.vertical_layout.py\nYou should see a small window pop up with the two widgets:\n4.2 Other layouts\nThere are other types of layout besides vertical stacking. As you might expect, there is a corresponding\nQHBoxLayout class that will stack widgets horizontally:\nfrom qtpy.QtWidgets import QHBoxLayout\nlayout = QHBoxLayout()\nlayout.addWidget(label)\nlayout.addWidget(button)\nwhich will look like:\n10",
    "Chapter 4": ". Part 3 - Laying out widgets",
    "CHAPTER 5": "Part 4 - Dynamically updating widgets\nNow that we know how to show multiple widgets in a single window, we can make use of what we learned in 2.but-\nton.py to connect different widgets together. For example, we can make it so that pressing a button changes the text in\none of the widgets:\nfrom qtpy.QtWidgets import (QApplication, QLabel, QWidget, QVBoxLayout,\nQPushButton)\n# Initialize application\napp = QApplication([])\n# Create label\nlabel = QLabel('Zzzzz')\ndefsay_hello(event):\nlabel.setText('Hello, world!')\n# Create button\nbutton = QPushButton('Press me!')\nbutton.clicked.connect(say_hello)\n# Create layout and add widgets\nlayout = QVBoxLayout()\nlayout.addWidget(label)\nlayout.addWidget(button)\n# Apply layout to widget\nwidget = QWidget()\nwidget.setLayout(layout)\nwidget.show()\napp.exec_()\nTry running this script, and you should see something like:\n13\nPython Qt tutorial Documentation, Release 0.0\nNow press the button, and the label text should change:\nIf you are interested in helping maintain these pages and/or add new pages, head over to the GitHub repository!\n14",
    "Chapter 5": ". Part 4 - Dynamically updating widgets"
}